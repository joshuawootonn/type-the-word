import { signIn, signOut, useSession } from 'next-auth/react'
import Head from 'next/head'

import { api } from '~/utils/api'

const verseRegex = /\[[0-9]+\].*?(?=\[|$)/g
const verseNumberRegex = /\[[0-9]+\]/g
const numberRegex = /[0-9]+/g

type Passage =
    | { type: 'newLine' }
    | { type: 'verse'; verse: string; text: string }

function parseChapter(passage: string): Passage[] {
    return passage.split('\n').flatMap((line): Passage[] => {
        if (line === '') {
            return [{ type: 'newLine' as const }]
        } else if (verseRegex.test(line)) {
            const verseNodes = []
            for (const match of line.match(verseRegex) ?? []) {
                verseNodes.push({
                    type: 'verse' as const,
                    verse: match.match(numberRegex)?.[0] ?? '',
                    text: match.replace(verseNumberRegex, '').trim(),
                })
            }

            console.log({ verseNodes, asdf: line.match(verseRegex) })

            return verseNodes
        }
        return []
    })
}

export default function Home() {
    const passage = api.passage.passage.useQuery('Genesis+6')
    const chapter = parseChapter(passage.data?.passages.at(0) ?? '')

    return (
        <div className="container min-h-screen flex flex-col mx-auto">
            <Head>
                <title>Create T3 App</title>
                <meta name="description" content="Generated by create-t3-app" />
                <link rel="icon" href="/favicon.ico" />
            </Head>
            <nav className="w-full flex justify-between items-center gap-12">
                <h1 className="text-2xl font-mono font-extrabold tracking-tight text-black">
                    type the word
                </h1>
                <div className="flex flex-col items-center gap-2">
                    <AuthShowcase />
                </div>
            </nav>

            <main>
                {chapter.map((node, i) => (
                    <p key={i}>
                        {node.type === 'verse'
                            ? `${node.verse} ${node.text}`
                            : '\n'}
                    </p>
                ))}
                {/* <p>{passage.data?.passages.at(0)}</p>
                {JSON.stringify(passage.data)} */}
            </main>
        </div>
    )
}

function AuthShowcase() {
    const { data: sessionData } = useSession()

    const { data: secretMessage } = api.example.getSecretMessage.useQuery(
        undefined, // no input
        { enabled: sessionData?.user !== undefined },
    )

    return (
        <div className="flex flex-col items-center justify-center gap-4">
            <p className="text-center text-2xl text-black">
                {sessionData && (
                    <span>Logged in as {sessionData.user?.name}</span>
                )}
                {secretMessage && <span> - {secretMessage}</span>}
            </p>
            <button
                className="rounded-full px-10 py-3 font-semibold text-black"
                onClick={
                    sessionData ? () => void signOut() : () => void signIn()
                }
            >
                {sessionData ? 'Sign out' : 'Sign in'}
            </button>
        </div>
    )
}
