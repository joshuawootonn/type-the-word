import { clsx } from 'clsx'
import { signIn, signOut, useSession } from 'next-auth/react'
import Head from 'next/head'
import { useMemo, useRef, useState } from 'react'

import { api } from '~/utils/api'

const verseRegex = /\[[0-9]+\].*?(?=\[|$)/g
const footnoteRegex = /\([0-9]+\).*?(?=\(|$)/g
const verseNumberRegex = /\[[0-9]+\]/g
const numberRegex = /[0-9]+/g
const footnoteNumberRegex = /\([0-9]+\)/g

type Passage =
    | { type: 'newLine' }
    | { type: 'title'; text: string }
    | {
          type: 'paragraph'
          nodes: {
              type: 'verse'
              verse: string
              text: string
              splitText: string[][]
          }[]
      }
    | { type: 'footnote'; verse: string; text: string }

function parseChapter(passage: string): Passage[] {
    return passage.split('\n').flatMap((line): Passage[] => {
        if (line === '') {
            return []
        } else if (verseRegex.test(line)) {
            const verseNodes = []
            for (const match of line.match(verseRegex) ?? []) {
                const text = match
                    .replace(verseNumberRegex, '')
                    .replace(footnoteNumberRegex, '')
                    .trim()
                verseNodes.push({
                    type: 'verse' as const,
                    verse: match.match(numberRegex)?.[0] ?? '',
                    text,
                    splitText: text.split(' ').map(word => word.split('')),
                })
            }

            return [{ type: 'paragraph' as const, nodes: verseNodes }]
        } else if (footnoteRegex.test(line)) {
            const footnoteNodes = []
            for (const match of line.match(footnoteRegex) ?? []) {
                footnoteNodes.push({
                    type: 'footnote' as const,
                    verse: match.match(footnoteNumberRegex)?.[0] ?? '',
                    text: match
                        .replace(verseNumberRegex, '')
                        .replace(footnoteNumberRegex, ''),
                })
            }

            return footnoteNodes
        } else {
            return [{ type: 'title' as const, text: line }]
        }
        return []
    })
}

export default function Home() {
    const passage = api.passage.passage.useQuery('Genesis+6')
    const chapter = parseChapter(passage.data?.passages.at(0) ?? '')
    const inputRef = useRef<HTMLInputElement>(null)
    const [keystrokes, setKeystrokes] = useState<
        { inputType: string; data: string }[]
    >([])
    const [currentVerse, setCurrentVerse] = useState(
        '1',
        //chapter.find(node => node.type === 'paragraph')?.nodes?.at(0)?.verse as string,
    )

    function handleInput(e: React.FormEvent<HTMLInputElement>) {
        if (
            e.nativeEvent.inputType === 'insertText' ||
            e.nativeEvent.inputType === 'deleteContentBackward'
        ) {
            console.log(e.nativeEvent.inputType, e.nativeEvent.data)

            setKeystrokes(prev =>
                prev.concat({
                    inputType: e.nativeEvent.inputType,
                    data: e.nativeEvent.data,
                }),
            )
        }
    }

    const position = keystrokes.reduce(
        (acc, keystroke) => {
            if (
                keystroke.inputType === 'insertText' &&
                keystroke.data === ' '
            ) {
                return [...acc, []]
            } else if (keystroke.inputType === 'insertText' && keystroke.data) {
                return [
                    ...acc.slice(0, -1),
                    (acc.at(-1) ?? []).concat(keystroke.data),
                ]
            } else if (keystroke.inputType === 'deleteContentBackward') {
                if (acc.at(-1)?.length === 0) {
                    return acc.slice(0, -1)
                }

                return [...acc.slice(0, -1), (acc.at(-1) ?? []).slice(0, -1)]
            }
            return [...acc]
        },
        [[]] as string[][],
    )
    function isEqual(a: string[], b: string[]) {
        return a.length === b.length && a.every((A, i) => A === b.at(i))
    }

    console.log({ currentVerse, chapter })

    return (
        <div className="container min-h-screen flex flex-col mx-auto">
            <Head>
                <title>Create T3 App</title>
                <meta name="description" content="Generated by create-t3-app" />
                <link rel="icon" href="/favicon.ico" />
            </Head>
            <nav className="prose mx-auto w-full flex justify-between items-center mb-8 pt-8">
                <h1 className="text-xl font-mono font-extrabold tracking-tight text-black m-0">
                    type the word
                </h1>
                <AuthShowcase />
            </nav>

            <main className="prose mx-auto focus-within:border-red-400 border-2">
                <input
                    type="text"
                    className="h-0 peer opacity-0"
                    tabIndex={0}
                    id="myInput"
                    onInput={e => {
                        e.preventDefault()
                        handleInput(e)
                    }}
                    ref={inputRef}
                />
                {chapter.map((node, pIndex) => {
                    switch (node.type) {
                        case 'paragraph':
                            return (
                                <p className="font-[0px]" key={pIndex}>
                                    {node.nodes.map((verse, vIndex) => {
                                        const isCurrentVerse =
                                            currentVerse === verse.verse
                                        return (
                                            <span
                                                key={vIndex}
                                                className={clsx(
                                                    'verse inline break-spaces text-balance h-3',
                                                    isCurrentVerse &&
                                                        'bg-gray-100',
                                                )}
                                                onClick={() => {
                                                    inputRef.current?.focus()
                                                }}
                                            >
                                                <b className="">
                                                    {verse.verse}&nbsp;
                                                </b>
                                                {!isCurrentVerse
                                                    ? verse.text
                                                    : verse.splitText.map(
                                                          (word, wIndex) => {
                                                              const typedWord =
                                                                  position.at(
                                                                      wIndex,
                                                                  )
                                                              const extras =
                                                                  typedWord?.slice(
                                                                      word.length,
                                                                  )
                                                              const isPreviouslyTyped =
                                                                  position.at(
                                                                      wIndex +
                                                                          1,
                                                                  )
                                                              return (
                                                                  <>
                                                                      <span
                                                                          key={
                                                                              wIndex
                                                                          }
                                                                          className={clsx(
                                                                              'word',
                                                                              typedWord &&
                                                                                  isPreviouslyTyped ==
                                                                                      null &&
                                                                                  'active',
                                                                              typedWord &&
                                                                                  isPreviouslyTyped &&
                                                                                  !isEqual(
                                                                                      word,
                                                                                      typedWord,
                                                                                  ) &&
                                                                                  'underline decoration-rose-500',
                                                                          )}
                                                                      >
                                                                          {extras?.length &&
                                                                          typedWord
                                                                              ? typedWord.map(
                                                                                    (
                                                                                        letter,
                                                                                        lIndex,
                                                                                    ) => {
                                                                                        const correctLetter =
                                                                                            word?.at(
                                                                                                lIndex,
                                                                                            )
                                                                                        return (
                                                                                            <span
                                                                                                data-letter
                                                                                                key={
                                                                                                    lIndex
                                                                                                }
                                                                                                className={clsx(
                                                                                                    'letter',
                                                                                                    letter ===
                                                                                                        correctLetter &&
                                                                                                        'text-emerald-500',
                                                                                                    correctLetter &&
                                                                                                        letter !==
                                                                                                            correctLetter &&
                                                                                                        'text-rose-700',
                                                                                                    lIndex >
                                                                                                        word.length -
                                                                                                            1 &&
                                                                                                        'text-rose-700',
                                                                                                )}
                                                                                            >
                                                                                                {
                                                                                                    letter
                                                                                                }
                                                                                            </span>
                                                                                        )
                                                                                    },
                                                                                )
                                                                              : word.map(
                                                                                    (
                                                                                        letter,
                                                                                        lIndex,
                                                                                    ) => {
                                                                                        const typedLetter =
                                                                                            typedWord?.at(
                                                                                                lIndex,
                                                                                            )
                                                                                        return (
                                                                                            <span
                                                                                                data-letter
                                                                                                key={
                                                                                                    lIndex
                                                                                                }
                                                                                                className={clsx(
                                                                                                    'letter',
                                                                                                    letter ===
                                                                                                        typedLetter &&
                                                                                                        'text-emerald-500',
                                                                                                    typedLetter &&
                                                                                                        letter !==
                                                                                                            typedLetter &&
                                                                                                        'text-rose-700',
                                                                                                )}
                                                                                            >
                                                                                                {
                                                                                                    letter
                                                                                                }
                                                                                            </span>
                                                                                        )
                                                                                    },
                                                                                )}
                                                                      </span>
                                                                      <span
                                                                          data-space
                                                                      >
                                                                          {' '}
                                                                      </span>
                                                                  </>
                                                              )
                                                          },
                                                      )}
                                            </span>
                                        )
                                    })}
                                </p>
                            )
                        case 'footnote':
                            return (
                                <p key={pIndex} className="my-2">
                                    <b>{node.verse}</b>
                                    {node.text}
                                </p>
                            )
                        case 'newLine':
                            return <br key={pIndex} className="mb-2" />
                        case 'title':
                            return (
                                <h2 key={pIndex} className="tracking-tight">
                                    {node.text}
                                </h2>
                            )
                        default:
                            break
                    }
                })}
            </main>
        </div>
    )
}

function AuthShowcase() {
    const { data: sessionData } = useSession()

    const { data: secretMessage } = api.example.getSecretMessage.useQuery(
        undefined, // no input
        { enabled: sessionData?.user !== undefined },
    )

    return (
        <div className="flex flex-col  gap-4">
            {/* <p className="text-center text-2xl text-black">
                    {sessionData && (
                        <span>Logged in as {sessionData.user?.name}</span>
                    )}
                    {secretMessage && <span> - {secretMessage}</span>}
                </p> */}
            <button
                className="rounded-full px-10 py-3 font-semibold text-black"
                onClick={
                    sessionData ? () => void signOut() : () => void signIn()
                }
            >
                {sessionData ? 'Sign out' : 'Sign in'}
            </button>
        </div>
    )
}
